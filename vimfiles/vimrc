" config {{{
" windows specific {{{
if ($OS == 'Windows_NT')
    " set shell to cmd
    set shell=c:\Windows\system32\cmd.exe
    set shellcmdflag=/c
endif
" }}}

" no backup {{{
set nobackup
set nowritebackup
set noswapfile
" }}}

" tab stuff {{{
set nocompatible " use vim defaults instead of vi
set tabstop=4 " tabstop
set shiftwidth=4 " shiftwidth
set softtabstop=4
set expandtab " expand tab to space
set wrap " warp long lines
set cindent " c style indention
" }}}

" general stuff {{{
filetype indent plugin on
syntax on
set cursorline
set showcmd
set wildmenu
set showmatch
set bs=2 " allow backspacing over everything in insert mode
set clipboard=unnamed " better clipboard
set history=80 " bigger history
set guifont=JetBrains_Mono_NL:h12:cANSI:qDRAFT " change font to jetbrains mono
" }}}

" Searching {{{
set incsearch " search as characters are entered
set hlsearch  "highlight matches
" }}}

" file encoding {{{
set fileencodings=utf-8
set encoding=utf-8
" }}}

" folding {{{
set foldenable
set foldlevelstart=0
set foldnestmax=10
set foldmethod=marker
set modelines=1
" }}}

" Set line numbers {{{
nmap <silent> <leader>ln :exec &nu==&rnu? "se nu!" : "se rnu!"<cr>
set nu
set relativenumber
" }}}
" }}}

if empty(glob('~/vimfiles/autoload/plug.vim'))
    silent !powershell.exe -Command "& {md ~/vimfiles/autoload; $uri = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'; (New-Object Net.WebClient).DownloadFile($uri, $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath('~\vimfiles\autoload\plug.vim'))}"
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

function! InstallWimspector(info)
    silent !powershell.exe -Command "& {cd ~/vimfiles/foxes/vimspector; python install_gadget.py --all --disable-tcl --force-enable-csharp}"
endfunction

" plugins {{{
call plug#begin("~/vimfiles/foxes")
Plug 'vim-airline/vim-airline' " Airline
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } " Tree view
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on':  'NERDTreeToggle' } " Git integration 
Plug 'nathanaelkane/vim-indent-guides' " Guidelines for indention
Plug 'ryanoasis/vim-devicons' " Better icons for nerdtree n co
Plug 'tpope/vim-commentary' " comment-uncomment
Plug 'OmniSharp/omnisharp-vim', { 'do': 'g:OmniSharpInstall' } " c# autocomplete
Plug 'dense-analysis/ale' " linter
Plug 'ctrlpvim/ctrlp.vim'
Plug 'Shougo/echodoc.vim'
Plug 'puremourning/vimspector', { 'do': function('InstallWimspector')}
Plug 'dracula/vim'
call plug#end()
" }}}

" plugin config {{{
" theme {{{
colorscheme dracula
set background=dark
autocmd VimEnter * hi Normal ctermbg=none
" }}}

" options {{{
let g:airline_powerline_fonts = 1
let g:indent_guides_enable_on_vim_startup = 1 " enable indent guidelines

" exit when nerdtree is last window open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif 

let g:ale_linters = { 'cs': ['OmniSharp'] } " only enable omnisharp as linter
let g:airline#extensions#ale#enabled = 1 " enable ale airline integration

let g:OmniSharp_server_stdio = 1 " use stdio instead of http for omnisharp
let g:OmniSharp_selector_ui = 'ctrlp'
let g:OmniSharp_highlight_types = 3 " instant highlights
set completeopt=longest,menuone,preview " enable preview even when only one option is enabled
let g:omnicomplete_fetch_full_documentation = 1 " fetch full docs 
let g:echodoc#enable_at_startup = 1
set cmdheight=2

let g:vimspector_enable_mappings = 'HUMAN'
" }}}

" omnisharp commands {{{
augroup omnisharp_commands
    autocmd!

    " Show type information automatically when the cursor stops moving.
    " Note that the type is echoed to the Vim command line, and will overwrite
    " any other messages in this space including e.g. ALE linting messages.
    autocmd CursorHold *.cs OmniSharpTypeLookup

    " The following commands are contextual, based on the cursor position.
    autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>

    " Finds members in the current buffer
    autocmd FileType cs nnoremap <buffer> <Leader>fm :OmniSharpFindMembers<CR>

    autocmd FileType cs nnoremap <buffer> <Leader>fx :OmniSharpFixUsings<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>tt :OmniSharpTypeLookup<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>dc :OmniSharpDocumentation<CR>
    autocmd FileType cs nnoremap <buffer> <C-\> :OmniSharpSignatureHelp<CR>
    autocmd FileType cs inoremap <buffer> <C-\> <C-o>:OmniSharpSignatureHelp<CR>

    " Navigate up and down by method/property/field
    autocmd FileType cs nnoremap <buffer> <C-k> :OmniSharpNavigateUp<CR>
    autocmd FileType cs nnoremap <buffer> <C-j> :OmniSharpNavigateDown<CR>

    " Find all code errors/warnings for the current solution and populate the quickfix window
    autocmd FileType cs nnoremap <buffer> <Leader>cc :OmniSharpGlobalCodeCheck<CR>
augroup END

" Contextual code actions (uses fzf, CtrlP or unite.vim when available)
nnoremap <C-CR> :OmniSharpGetCodeActions<CR>
" Run code actions with text selected in visual mode to extract method
" xnoremap <C-CR> :call OmniSharp#GetCodeActions('visual')<CR>

" Rename with dialog
nnoremap <Leader>nm :OmniSharpRename<CR>
nnoremap <F2> :OmniSharpRename<CR>
" Rename without dialog - with cursor on the symbol to rename: `:Rename newname`
command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

nnoremap <Leader>cf :OmniSharpCodeFormat<CR>

" Start the omnisharp server for the current solution
nnoremap <Leader>ss :OmniSharpStartServer<CR>
nnoremap <Leader>sp :OmniSharpStopServer<CR>
" }}}

" keyboard {{{
map <C-n> :NERDTreeToggle<CR>
inoremap <C-Space> <C-x><C-o>
inoremap <C-@> <C-Space>
" }}}
" }}}


" vim:foldmethod=marker:foldlevel=0
